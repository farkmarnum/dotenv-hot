import fs from 'fs';
import { isTypescript, quit } from './util';
import { WORKING_DIR, PACKAGE_NAME, ENV_MODULE_COMMENT } from './constants';

export const runInitialGuards = () => {
  /* These scripts should not be imported, just run via npx */
  const wasRequired = require.main === module;
  if (wasRequired) {
    quit(
      `setup.js should not be imported, it should be run via \`npx ${PACKAGE_NAME} <command>\``,
    );
  }

  /* Usage */
  const [command] = process.argv.slice(2);
  if (command !== 'setup') {
    quit(`USAGE: npx ${PACKAGE_NAME} setup`);
  }

  /* Must be a git repo */
  const isGitRepository = fs.existsSync(`${WORKING_DIR}/.git`);
  if (!isGitRepository) {
    quit(
      `This directory doesn't seem to be a git repository (couldn't find .git)`,
    );
  }
};

export const runEnvModuleGuard = (pathForEnvModule: string) => {
  /* Can't already have a env.js or env.ts file, unless it was generated by this tool. */
  const envModuleFilename = `env.${isTypescript() ? 'ts' : 'js'}`;
  const envModulePath = `${pathForEnvModule}/${envModuleFilename}`;
  const hasEnvModuleAlready = fs.existsSync(envModulePath);
  if (hasEnvModuleAlready) {
    const contents = fs.readFileSync(envModulePath, 'utf-8');
    if (!contents.includes(ENV_MODULE_COMMENT)) {
      quit(
        `This directory already has a ${envModuleFilename} -- that file will be generated by this tool.`,
      );
    }
  }
};
